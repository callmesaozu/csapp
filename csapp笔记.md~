### 逻辑运算

- `a&&5/a`,避免被0除
- `p&&*p++`避免间接引用空指针

### 位移运算

```C
int x = 0x81462146;	//x = 0x81462146 = -2126110394
int m = x << k;
//m = 0x14621460
int n = x >> k;
//n = f8146214, x >> 4 = 0xf8146214 = -132881900
```

- `x<<j<<k`等价于`(x<<j)<<k`
- 逻辑右移：左端补k个0
- 算术右移：左端补k个最高有效位值
- 对于无符号数，必定是逻辑右移，对于有符号数，两种都有可能, C语言没有明确定义，但java有
- 几乎所有的编译器/机器组合都对有符号数使用算数右移
- 位移指令只考虑低$log_{2}w$位(w为数据类型的位数)，位移量是通过`k mod w`计算出来的,但事实上C语言并没有保证这种行为,所以位移数量要小于字长
	```C
	//32位机，理论上
	int lval = 0xFEDCBA98 << 32;
	int aval = 0xFEDCBA98 >> 36;
	unsigned uval = 0xFEDCBA98 >> 40;
	lval = 0xFEDCBA98;	//左移0位
	aval = 0xFFEDCBA9;	//右移4位
	uval = 0x00FEDCBA;	//右移8位
	//实际上
	int x = 0x81462146 = -2126110394;
	x << 32 = 0x81462146 = -2126110394;
	x >> 32 = 0x81462146 = -2126110394;
	```

- C语言中的位移优先级比加法和减法要低， `1<<2+3<<4`等价于`1<<(2+3)<<4`(512),所以混合运算的时候必须加括号

## 整数表示

### 整数数据类型

```C
sizeof(char) = 1
sizeof(int) = 4
sizeof(unsigned short) = 2
sizeof(long) = 8
sizeof(long long) = 8
```

- C、C++都支持有符号和无符号数，java只支持有符号数

### 无符号数编码

$$B2U_{w}(\vec x) \doteq \sum_{i = 0}^{w - 1}x_{i}2^{i}$$

### 补码编码

补码(two's-complement)是表示有符号数的常见形式

$$B2T_{w}(\vec x) \doteq \sum_{i = 0}^{w - 1}x_{i}2^{i}$$

